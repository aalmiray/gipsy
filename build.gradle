/*
 * Copyright 2013-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.01'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'build-dashboard'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/publish.gradle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    jcenter()
    maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
}

dependencies {
    compile "org.kordamp.jipsy:jipsy:${project.version}"
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile 'junit:junit:4.11'
}

jacoco {
    toolVersion = '0.7.2.201409121644'
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    from sourceSets.main.allSource
    classifier 'sources'
}

task javadocJar(type: Jar) {
    group 'Build'
    description 'An archive of the javadoc'
    from javadoc.output
    classifier 'javadoc'
}

artifacts {
    sourceJar
    javadocJar
}

compileJava {
    doFirst {
        options.compilerArgs = ['-proc:none']
    }
}

